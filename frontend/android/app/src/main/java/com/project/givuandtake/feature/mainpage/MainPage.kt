package com.project.givuandtake.feature.mainpage

import android.util.Log
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.gestures.detectHorizontalDragGestures
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.lazy.itemsIndexed
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.LinearProgressIndicator
import androidx.compose.material3.Button
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.State
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.input.pointer.consumePositionChange
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.SpanStyle
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.buildAnnotatedString
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.text.withStyle
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.navArgument
import coil.compose.rememberImagePainter
import com.project.givuandtake.core.apis.Address.AddressApi
import com.project.givuandtake.core.apis.Mainpage.TopGivuApi
import com.project.givuandtake.core.apis.Mainpage.TotalGivuApi
import com.project.givuandtake.core.data.Address.AddressData
import com.project.givuandtake.core.data.Address.UserAddress
import com.project.givuandtake.core.data.MainPage.Funding
import com.project.givuandtake.core.data.MainPage.Gift
import com.project.givuandtake.core.data.MainPage.TopGivuData
import com.project.givuandtake.core.data.MainPage.TopGivuDataResponse
import com.project.givuandtake.core.data.MainPage.TotalGivu
import com.project.givuandtake.core.datastore.TokenManager
import com.project.givuandtake.feature.mypage.MyDonation.formatPrice
import com.project.givuandtake.feature.mypage.sections.formatLongPrice
import kotlinx.coroutines.launch
import retrofit2.Response
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale
import kotlin.random.Random
import com.project.givuandtake.R

class MainPageViewModel : ViewModel() {

    private val _totalgivu = mutableStateOf<TotalGivu?>(null)
    val totalgivu: State<TotalGivu?> = _totalgivu

    private val _topgivu = mutableStateOf<List<Gift>>(emptyList())
    val topgivu: State<List<Gift>> = _topgivu

    private val _topgfunding = mutableStateOf<List<Funding>>(emptyList())
    val topgfunding: State<List<Funding>> = _topgfunding

    private val _recentgift = mutableStateOf<List<TopGivuData>>(emptyList())
    val recentgift: State<List<TopGivuData>> = _recentgift

    fun fetchTotalGivu() {
        viewModelScope.launch {
            try {
                val response = TotalGivuApi.api.getTotalGivuData()
                if (response.isSuccessful) {
                    val totalgivu = response.body()?.data
                    totalgivu?.let {
                        _totalgivu.value = it
                    }
                } else {
                    Log.e("totalgivu", "Error: ${response.code()} ${response.message()}")
                }
            } catch (e: Exception) {
                Log.e("totalgivu", "Exception: ${e.message}")
            }
        }
    }

    fun fetchTopGivu(token: String) {
        viewModelScope.launch {
            try {
                val response: Response<TopGivuData> = TopGivuApi.api.getTopGivuData("$token")
                if (response.isSuccessful) {
                    val topgivuResponse = response.body()?.data
                    topgivuResponse?.let {
                        _topgivu.value = it.top10Gifts ?: emptyList()
                    }
                    topgivuResponse?.let {
                        _topgfunding.value = it.deadlineImminentFundings ?: emptyList()
                    }
                    topgivuResponse?.let {
                        _recentgift.value = (it.recentGifts ?: emptyList()) as List<TopGivuData>
                    }
                } else {
                    Log.e("topgivu", "Error: ${response.code()} ${response.message()}")
                }
            } catch (e: Exception) {
                Log.e("topgivu", "Exception: ${e.message}")
            }
        }
    }
}

@Composable
fun Carousel(navController: NavController) {
    var currentIndex by remember { mutableStateOf(0) }

    val images = listOf(
        painterResource(id = com.project.givuandtake.R.drawable.banner1),
        painterResource(id = com.project.givuandtake.R.drawable.banner2),
        painterResource(id = com.project.givuandtake.R.drawable.banner3),
    )

    // Ïù¥ÎØ∏ÏßÄÏùò Ï¥ù Í∞úÏàò
    val imageCount = images.size

    // Ìïú Î≤à ÎìúÎûòÍ∑∏ Ïãú Ïù¥ÎØ∏ÏßÄÎ•º ÎÑòÍ∏∏ Í∏∞Ï§Ä Í±∞Î¶¨
    val swipeThreshold = 100f
    var accumulatedDrag = 0f

    // Ï†ÑÏ≤¥ Î∞∞Í≤Ω Î∞è ÌÅ¨Í∏∞ ÏÑ§Ï†ï
    Box(
        modifier = Modifier
            .fillMaxWidth()
            .height(150.dp)
            .padding(10.dp)
            .clip(RoundedCornerShape(15.dp))
            .pointerInput(Unit) {
                detectHorizontalDragGestures(
                    onDragStart = {
                        // ÎìúÎûòÍ∑∏ ÏãúÏûë Ïãú ÎàÑÏ†Å ÎìúÎûòÍ∑∏ Ï¥àÍ∏∞Ìôî
                        accumulatedDrag = 0f
                    },
                    onDragEnd = {
                        // ÎìúÎûòÍ∑∏Í∞Ä ÎÅùÎÇ¨ÏùÑ Îïå ÎàÑÏ†ÅÎêú ÎìúÎûòÍ∑∏ Í±∞Î¶¨Î•º Í∏∞Ï§ÄÏúºÎ°ú Ïù¥ÎØ∏ÏßÄ ÎÑòÍπÄ Ï≤òÎ¶¨
                        if (accumulatedDrag > swipeThreshold) {
                            // Ïò§Î•∏Ï™ΩÏóêÏÑú ÏôºÏ™ΩÏúºÎ°ú ÎìúÎûòÍ∑∏ - Îã§Ïùå Ïù¥ÎØ∏ÏßÄ
                            currentIndex = (currentIndex + 1) % imageCount
                        } else if (accumulatedDrag < -swipeThreshold) {
                            // ÏôºÏ™ΩÏóêÏÑú Ïò§Î•∏Ï™ΩÏúºÎ°ú ÎìúÎûòÍ∑∏ - Ïù¥Ï†Ñ Ïù¥ÎØ∏ÏßÄ
                            currentIndex =
                                if (currentIndex - 1 < 0) imageCount - 1 else currentIndex - 1
                        }
                    },
                    onHorizontalDrag = { change, dragAmount ->
                        // ÎìúÎûòÍ∑∏ Ï§ëÏùº Îïå ÎàÑÏ†Å ÎìúÎûòÍ∑∏ Ïñë Í≥ÑÏÇ∞
                        accumulatedDrag += dragAmount
                        change.consumePositionChange()
                    }
                )
            },
        contentAlignment = Alignment.Center
    ) {
        Image(
            painter = images[currentIndex],
            contentDescription = null,
            modifier = Modifier
                .fillMaxWidth()
                .height(150.dp)
                .clip(RoundedCornerShape(10.dp)),
            contentScale = ContentScale.Crop
        )

        // ÌïòÎã® ÌéòÏù¥ÏßÄ Ïù∏ÎîîÏºÄÏù¥ÌÑ∞
        Row(
            modifier = Modifier
                .align(Alignment.BottomCenter)
                .padding(bottom = 10.dp),
            horizontalArrangement = Arrangement.Center
        ) {
            for (i in 0 until imageCount) {
                Box(
                    modifier = Modifier
                        .size(8.dp)
                        .clip(CircleShape)
                        .background(if (i == currentIndex) Color.Black else Color.Gray) // ÌòÑÏû¨ ÏÑ†ÌÉùÎêú Ïù∏Îç±Ïä§Îäî Í≤ÄÏ†ïÏÉâ, ÎÇòÎ®∏ÏßÄÎäî ÌöåÏÉâ
                        .padding(4.dp)
                )
                if (i < imageCount - 1) {
                    Spacer(modifier = Modifier.width(8.dp)) // ÎèôÍ∑∏ÎùºÎØ∏ ÏÇ¨Ïù¥ Í∞ÑÍ≤©
                }
            }
        }
    }
}

@Composable
fun Top10GiftsView(gifts: List<Gift>, navController: NavController) {
    Column {
        Text(
            text = "üèÜ Ïã§ÏãúÍ∞Ñ Ïù∏Í∏∞ Í∏∞Î∂ÄÌíà üèÜ",
            fontSize = 18.sp,
            color = Color.Black,
            modifier = Modifier.padding(start = 13.dp, top = 16.dp)
        )
        Spacer(modifier = Modifier.height(8.dp))

        LazyRow(
            modifier = Modifier.fillMaxWidth(),
        ) {
            itemsIndexed(gifts) { index, gift ->
                GiftCard(gift = gift, index = index + 1, navController = navController)
            }
        }
    }
}

@Composable
fun GiftCard(gift: Gift, index: Int, navController: NavController) {
    Box(
        modifier = Modifier
            .width(200.dp)
            .height(320.dp)
            .padding(8.dp)
            .shadow(
                elevation = 4.dp,
                shape = RoundedCornerShape(12.dp),
                clip = true
            )
            .clip(RoundedCornerShape(12.dp))
            .background(Color(0xFFFBFAFF))
            .border(
                width = 1.dp,
                color = Color(0x60FBAFFF),
                shape = RoundedCornerShape(12.dp)
            )

    ) {
        Column (
        ){
            // ÏÉÅÌíà Ïù¥ÎØ∏ÏßÄ
            Image(
                painter = rememberImagePainter(data = gift.giftThumbnail),
                contentDescription = gift.giftName,
                modifier = Modifier
                    .fillMaxWidth()
                    .height(160.dp)
                    .clip(RoundedCornerShape(8.dp)),
                contentScale = ContentScale.Crop
            )

            Spacer(modifier = Modifier.height(8.dp))

            Row(
                modifier = Modifier
                    .padding(4.dp)
                    .fillMaxWidth(),
                horizontalArrangement = Arrangement.Center,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = "$index",
                    fontSize = 24.sp,
                    color = Color.Black,
                    modifier = Modifier
                        .width(30.dp)
                        .padding(8.dp),
                    fontWeight = FontWeight.Bold,
                    textAlign = TextAlign.Center,
                )
                Spacer(modifier = Modifier.width(3.dp))
                Column(
                    modifier = Modifier
                        .weight(1f)
                ) {
                    Text(
                        text = gift.giftName,
                        fontSize = 15.sp,
                        color = Color.Black,
                        maxLines = 2,
                        overflow = TextOverflow.Ellipsis,
                        modifier = Modifier.padding(bottom = 4.dp),
                    )

                    Spacer(modifier = Modifier.height(4.dp))

                    Text(
                        text = "${formatPrice(gift.price)} Ïõê",
                        fontSize = 13.sp,
                        color = Color.Black
                    )
                }
            }
            Spacer(modifier = Modifier.weight(1f))
            Box(
                modifier = Modifier
                    .padding(10.dp)
                    .fillMaxWidth()
                    .border(
                        width = 1.dp,
                        color = Color(0xFFA093DE),
                        shape = RoundedCornerShape(5.dp)
                    )
                    .clip(RoundedCornerShape(12.dp))
                    .padding(4.dp)
                    .clickable { navController.navigate("gift_page_detail/${gift.giftIdx}") }
            ) {
                Text(
                    text = "ÏÉÅÌíà Î≥¥Í∏∞",
                    color = Color(0xFFA093DE),
                    fontSize = 13.sp,
                    textAlign = TextAlign.Center,
                    modifier = Modifier.fillMaxWidth()
                )
            }
        }
    }
}

@Composable
fun FundingCard(funding: Funding, navController: NavController) {
    Box(
        modifier = Modifier
            .fillMaxWidth()
            .clip(RoundedCornerShape(12.dp))
            .padding(8.dp)
            .shadow(
                elevation = 4.dp,
                shape = RoundedCornerShape(12.dp),
                clip = true
            )
            .clip(RoundedCornerShape(12.dp))
            .background(Color(0xFFFBFAFF))
            .border(
                width = 1.dp,
                color = Color(0x60FBAFFF),
                shape = RoundedCornerShape(12.dp)
            )
            .clickable { navController.navigate("funding_detail/${funding.fundingIdx}") }
    ) {
        Column (
        ){
            Image(
                painter = rememberImagePainter(data = funding.fundingThumbnail),
                contentDescription = funding.fundingTitle,
                modifier = Modifier
                    .fillMaxWidth()
                    .height(150.dp),
                contentScale = ContentScale.Crop
            )

            Spacer(modifier = Modifier.height(8.dp))

            Column(
                modifier = Modifier.padding(8.dp)
            ) {

                Text(
                    text = funding.fundingTitle,
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color.Black,
                    maxLines = 1,
                    overflow = TextOverflow.Ellipsis
                )

                Spacer(modifier = Modifier.height(4.dp))

                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween
                ) {
                    Text(
                        text = funding.sido + " " +funding.sigungu,
                        fontSize = 14.sp,
                        color = Color.Gray
                    )
                    Text(
                        text = "D - ${calculateDDay(funding.endDate)}",
                        fontSize = 14.sp,
                        color = Color.Black,
                        fontWeight = FontWeight.Bold,
                        modifier = Modifier.padding(end = 3.dp)
                    )
                }

                Spacer(modifier = Modifier.height(8.dp))

                Column {
                    LinearProgressIndicator(
                        progress = calculateProgress(funding.totalMoney, funding.goalMoney),
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(8.dp)
                            .clip(RoundedCornerShape(4.dp)),
                        color = Color(0xFFB3C3F4)
                    )
                    Spacer(modifier = Modifier.height(4.dp))
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.SpaceBetween
                    ) {
                        Text(
                            text = "${(calculateProgress(funding.totalMoney, funding.goalMoney) * 100).toInt()}%",
                            color = Color(0xFFB3C3F4),
                            fontWeight = FontWeight.Bold,
                            modifier = Modifier.padding(start = 3.dp)
                        )
                        Text(
                            text = formatPrice(funding.totalMoney) + " Ïõê",
                            color = Color.Black,
                            fontWeight = FontWeight.Bold,
                            modifier = Modifier.padding(end = 3.dp)
                        )
                    }
                }
            }
        }
    }
}

fun calculateDDay(endDate: String): Int {
    val dateFormat = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault())
    val endDateParsed = dateFormat.parse(endDate)
    val currentDate = Date()

    val differenceInMillis = endDateParsed.time - currentDate.time
    val differenceInDays = (differenceInMillis / (1000 * 60 * 60 * 24)).toInt()

    return differenceInDays
}

fun calculateProgress(totalMoney: Int, goalMoney: Int): Float {
    return totalMoney.toFloat() / goalMoney.toFloat()
}

@Composable
fun CityBox(city: String, imageResId: Int, navController: NavController) {
    Box(
        modifier = Modifier
            .padding(8.dp)
            .size(150.dp)
            .clip(RoundedCornerShape(10.dp))
            .clickable { navController.navigate("attraction/$city") }
    ) {
        Image(
            painter = painterResource(id = imageResId),
            contentDescription = city,
            contentScale = ContentScale.Crop,
            modifier = Modifier.fillMaxSize()
        )
        Box(
            modifier = Modifier
                .width(70.dp)
                .height(40.dp)
                .align(Alignment.BottomStart)
                .padding(8.dp)
                .clip(RoundedCornerShape(10.dp))
                .background(Color(0xFFFBFAFF))
                .border(
                    width = 2.dp,
                    color = Color(0xFFB3C3F4),
                    shape = RoundedCornerShape(10.dp)
                ),
            contentAlignment = Alignment.Center
        ) {
            Text(
                text = city,
                color = Color.Black,
                fontSize = 15.sp,
                fontWeight = FontWeight.Bold,
                textAlign = TextAlign.Center
            )
        }
    }
}

@Composable
fun MainPage(navController: NavController) {
    val context = LocalContext.current
    val accessToken = "Bearer ${TokenManager.getAccessToken(context)}"
    val viewModel: MainPageViewModel = viewModel()

    LaunchedEffect(Unit) {
        viewModel.fetchTotalGivu()
        viewModel.fetchTopGivu(accessToken)
    }

    val totalgivu = viewModel.totalgivu
    val topgivu = viewModel.topgivu.value
    val topfunding = viewModel.topgfunding.value
    val recentgift = viewModel.recentgift

    val travelKeywords = listOf(
        "ÏïÑÏù¥Îì§Í≥º Ìï®Íªò Í∞ÄÍ∏∞ Ï¢ãÏùÄ ÏûêÏó∞ Ï≤¥ÌóòÏßÄ",
        "Ïó≠ÏÇ¨ÏôÄ Î¨∏ÌôîÎ•º Î∞∞Ïö∞Í∏∞ Ï¢ãÏùÄ Í≥≥",
        "ÌûêÎßÅÏùÑ ÏúÑÌïú Ï°∞Ïö©Ìïú ÏÇ∞Ï±Ö ÏΩîÏä§",
        "ÏÇ¨Í≥ÑÏ†à ÎÇ¥ÎÇ¥ Ï¶êÍ∏∏ Ïàò ÏûàÎäî Ïó¨ÌñâÏßÄ",
        "ÎßõÏûàÎäî ÏßÄÏó≠ ÏùåÏãùÏùÑ Ï¶êÍ∏∏ Ïàò ÏûàÎäî Í≥≥",
        "ÏïÑÏù¥Îì§Ïù¥ Ï¢ãÏïÑÌïòÎäî Ï≤¥Ìóò ÌîÑÎ°úÍ∑∏Îû®Ïù¥ ÎßéÏùÄ Í≥≥",
        "ÏûêÏó∞Í≥º Ìï®ÍªòÌïòÎäî ÌûêÎßÅ Ï∫†Ìïë Ïû•ÏÜå",
        "ÏÇ¨Í≥ÑÏ†à Ï∂ïÏ†úÍ∞Ä Ïó¥Î¶¨Îäî Í≥≥"
    )

    val citiesWithImages: Map<String, List<Pair<String, Int>>> = mapOf(
        "ÏïÑÏù¥Îì§Í≥º Í∞ÄÍ∏∞ Ï¢ãÏùÄ ÏûêÏó∞ Ï≤¥ÌóòÏßÄ" to listOf(
            Pair("Ìï®Ìèâ", R.drawable.hampyeong),
            Pair("Î≥¥ÏÑ±", R.drawable.bosung),
            Pair("ÌÉúÏïà", R.drawable.taean)
        ),
        "Ïó≠ÏÇ¨ÏôÄ Î¨∏ÌôîÎ•º Î∞∞Ïö∞Í∏∞ Ï¢ãÏùÄ Í≥≥" to listOf(
            Pair("ÏïàÎèô", R.drawable.andong),
            Pair("Î∂ÄÏó¨", R.drawable.buyeo),
            Pair("ÎÇ®Ïõê", R.drawable.namone)
        ),
        // ÎÇòÎ®∏ÏßÄ ÌÇ§ÏõåÎìúÏôÄ ÎèÑÏãúÎì§ÏùÑ Ï∂îÍ∞Ä
        "ÌûêÎßÅÏùÑ ÏúÑÌïú Ï°∞Ïö©Ìïú ÏÇ∞Ï±Ö ÏΩîÏä§" to listOf(
            Pair("ÌèâÏ∞Ω", R.drawable.pyeongchang),
            Pair("ÎÇ®Ìï¥", R.drawable.namhae),
            Pair("Í≥†Ìù•", R.drawable.gohung)
        ),
        "ÏÇ¨Í≥ÑÏ†à ÎÇ¥ÎÇ¥ Ï¶êÍ∏∏ Ïàò ÏûàÎäî Ïó¨ÌñâÏßÄ" to listOf(
            Pair("Î¨¥Ï£º", R.drawable.muzu),
            Pair("Ï†úÏ≤ú", R.drawable.jaecun),
            Pair("Ï†ïÏÑ†", R.drawable.jungsun)
        ),
        "ÎßõÏûàÎäî ÏßÄÏó≠ ÏùåÏãùÏùÑ Ï¶êÍ∏∏ Ïàò ÏûàÎäî Í≥≥" to listOf(
            Pair("ÏàúÏ∞Ω", R.drawable.sunchang),
            Pair("Î≥¥ÏÑ±", R.drawable.bosung),
            Pair("ÌïòÎèô", R.drawable.hadong)
        ),
        "ÏïÑÏù¥Îì§ÏùÑ ÏúÑÌïú Ï≤¥Ìóò ÌîÑÎ°úÍ∑∏Îû® ÎßéÏùÄ Í≥≥" to listOf(
            Pair("ÏûÑÏã§", R.drawable.imsil),
            Pair("Ïã†Ïïà", R.drawable.sinan),
            Pair("Í≥†ÏÑ±", R.drawable.gosung)
        ),
        "ÏûêÏó∞Í≥º Ìï®ÍªòÌïòÎäî ÌûêÎßÅ Ï∫†Ìïë Ïû•ÏÜå" to listOf(
            Pair("Í¥¥ÏÇ∞", R.drawable.gyeosanpng),
            Pair("ÌïòÎèô", R.drawable.hadong),
            Pair("Ìö°ÏÑ±", R.drawable.hoengsung)
        ),
        "ÏÇ¨Í≥ÑÏ†à Ï∂ïÏ†úÍ∞Ä Ïó¥Î¶¨Îäî Í≥≥" to listOf(
            Pair("Ìï®Ìèâ", R.drawable.hampyeong),
            Pair("ÌèâÏ∞Ω", R.drawable.pyeongchang),
            Pair("Î≥¥Î†π", R.drawable.boryeong)
        )
    )

    fun getRandomKeyword(): String {
        val randomIndex = Random.nextInt(travelKeywords.size)
        return travelKeywords[randomIndex]
    }
    val keyword = getRandomKeyword()
    val keyword2 = getRandomKeyword()
    val selectedCities = citiesWithImages[keyword] ?: emptyList()
    val selectedCities2 = citiesWithImages[keyword2] ?: emptyList()

    LazyColumn( // LazyColumn ÏûêÏ≤¥Í∞Ä Ïä§ÌÅ¨Î°§ Í∞ÄÎä•ÌïòÎØÄÎ°ú verticalScrollÏùÑ Ï†úÍ±∞
        modifier = Modifier
            .fillMaxSize()
            .padding(10.dp)
    ) {
        item {
            Text(
                text = buildAnnotatedString {
                    withStyle(style = SpanStyle(fontSize = 28.sp, fontWeight = FontWeight.Bold, color = Color(0xFFA093DE))) {
                        append("Givu")
                    }
                    withStyle(style = SpanStyle(fontSize = 18.sp, fontWeight = FontWeight.Normal, color = Color(0xFFDAEBFD))) {
                        append(" &")
                    }
                    withStyle(style = SpanStyle(fontSize = 28.sp, fontWeight = FontWeight.Bold, color = Color(0xFFB3C3F4))) {
                        append("Take")
                    }
                },
                fontSize = 25.sp,
                color = Color(0xFF37474F),
                modifier = Modifier
                    .padding(start = 13.dp, top = 16.dp)
            )
            Spacer(modifier = Modifier.height(10.dp))
        }

        item {
            Carousel(navController)
            Spacer(modifier = Modifier.height(10.dp))

            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(8.dp)
                    .clip(RoundedCornerShape(16.dp))
                    .background(Color(0xFFB3C3F4))
            ) {
                Column(
                    modifier = Modifier.padding(16.dp),
                ) {

                    Text(
                        text = "Ïö∞Î¶¨Í∞Ä Ìï®Íªò ÎÇòÎàà ÏÇ¨ÎûëÏùò Í∏∞Î∂Ä üíñ",
                        fontSize = 20.sp,
                        color = Color.White
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                    Text(
                        text = SimpleDateFormat("yyyy.MM.dd HHÏãú Í∏∞Ï§Ä", Locale.getDefault()).format(Date()),
                        fontSize = 12.sp,
                        color = Color.White
                    )
                    Spacer(modifier = Modifier.height(16.dp))

                    // ÌïòÎã® Í∏∞Î∂ÄÍ∏àÏï° Î∞è Í∏∞Î∂ÄÌöüÏàò ÌëúÏãú
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .clip(RoundedCornerShape(12.dp))
                            .background(Color.White)
                            .padding(16.dp),
                    ) {
                        Column {
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.SpaceBetween,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text(text = "Í∏∞Î∂ÄÍ∏àÏï°", color = Color.Gray, fontSize = 16.sp)
                                Text(
                                    text = "${totalgivu.value?.price?.let { formatLongPrice(it) }} Ïõê",
                                    color = Color.Black,
                                    fontSize = 20.sp
                                )
                            }
                        }
                    }
                }
            }
        }

        item {
            Spacer(modifier = Modifier.height(10.dp))
        }

        item {
            Top10GiftsView(gifts = topgivu, navController = navController)
            Spacer(modifier = Modifier.height(10.dp))
        }

        item {
            Text(
                text = "‚ú® $keyword ‚ú®",
                fontSize = 18.sp,
                color = Color.Black,
                modifier = Modifier.padding(start = 13.dp, top = 16.dp)
            )
            LazyRow(
                modifier = Modifier.fillMaxWidth(),
            ) {
                items(selectedCities) { (city, imageResId) ->
                    CityBox(city = city, imageResId = imageResId, navController = navController)
                }
            }
        }
        item {
            Text(
                text = "‚ú® $keyword2 ‚ú®",
                fontSize = 18.sp,
                color = Color.Black,
                modifier = Modifier.padding(start = 13.dp, top = 16.dp)
            )
            LazyRow(
                modifier = Modifier.fillMaxWidth(),
            ) {
                items(selectedCities2) { (city, imageResId) ->
                    CityBox(city = city, imageResId = imageResId, navController = navController)
                }
            }
        }

        item {
            Text(
                text = "ü§öüèª ÎßàÏßÄÎßâ ÏÜêÍ∏∏ÏùÑ ÎÇ¥Î∞ÄÏñ¥ Ï£ºÏÑ∏Ïöî ü§öüèª",
                fontSize = 18.sp,
                color = Color.Black,
                modifier = Modifier.padding(start = 13.dp, top = 16.dp)
            )
        }

        items(topfunding.take(3)) { funding ->
            FundingCard(funding = funding, navController = navController)
        }
    }
}
