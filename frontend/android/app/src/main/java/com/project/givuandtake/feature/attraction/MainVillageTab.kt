package com.project.givuandtake.feature.attraction

import android.util.Log
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.State
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import com.project.givuandtake.core.apis.Viliage.ViliageApi
import com.project.givuandtake.core.data.Viliage.ExperienceVillage
import com.project.givuandtake.core.data.Viliage.VillageData
import com.project.givuandtake.core.datastore.TokenManager
import com.project.givuandtake.feature.mypage.MyActivities.AddressViewModel
import kotlinx.coroutines.launch
import retrofit2.Response

class MainVillageViewModel : ViewModel() {

    private val _villageData = mutableStateOf<List<ExperienceVillage>>(emptyList())
    val villageData: State<List<ExperienceVillage>> = _villageData

    fun fetchVillageData(sido: String, sigungu: String, division: String?, pageNo: Int?, pageSize: Int? ) {
        viewModelScope.launch {
            try {
                val response: Response<VillageData> = ViliageApi.api.getExperienceVillage(sido, sigungu)
                if (response.isSuccessful) {
                    Log.d("MainVillageViewModel", "Ï≤¥Ìóò ÎßàÏùÑ Îç∞Ïù¥ÌÑ∞: ${response.body()?.data}")
                    response.body()?.let {
                        Log.d("MainVillageViewModel", "Ï≤¥Ìóò ÎßàÏùÑ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ ÏÑ±Í≥µ: ${it.data}")
                        _villageData.value = it.data
                    } ?: run {
                        Log.e("MainVillageViewModel", "ÏùëÎãµÏùÄ ÏÑ±Í≥µÌñàÏúºÎÇò Îç∞Ïù¥ÌÑ∞Í∞Ä ÎπÑÏñ¥ÏûàÏäµÎãàÎã§.")
                    }
                } else {
                    Log.e("MainVillageViewModel", "Ï≤¥Ìóò ÎßàÏùÑ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®: ${response.code()} - ${response.message()}")
                }
            } catch (e: Exception) {
                Log.e("MainVillageViewModel", "API Ìò∏Ï∂ú Ï§ë ÏòàÏô∏ Î∞úÏÉù: ${e.message}", e)
            }
        }
    }
}

@Composable
fun MainVillageTab(
    navController: NavController,
    displayedCity: String,
) {
    val viewModel: MainVillageViewModel = viewModel()

    val (sido, sigungu) = when (displayedCity) {
        "ÏòÅÎèÑ" -> Pair("Î∂ÄÏÇ∞Í¥ëÏó≠Ïãú", "ÏòÅÎèÑÍµ¨")
        "Íµ∞ÏúÑ" -> Pair("ÎåÄÍµ¨Í¥ëÏó≠Ïãú", "Íµ∞ÏúÑÍµ∞")

        "ÎÇ®Ïõê" -> Pair("Ï†ÑÎ∂ÅÌäπÎ≥ÑÏûêÏπòÎèÑ", "ÎÇ®ÏõêÏãú")
        "Î¨¥Ï£º" -> Pair("Ï†ÑÎ∂ÅÌäπÎ≥ÑÏûêÏπòÎèÑ", "Î¨¥Ï£ºÍµ∞")
        "ÏàúÏ∞Ω" -> Pair("Ï†ÑÎ∂ÅÌäπÎ≥ÑÏûêÏπòÎèÑ", "ÏàúÏ∞ΩÍµ∞")
        "ÏûÑÏã§" -> Pair("Ï†ÑÎ∂ÅÌäπÎ≥ÑÏûêÏπòÎèÑ", "ÏûÑÏã§Íµ∞")

        "Í≥†Ìù•" -> Pair("Ï†ÑÎùºÎÇ®ÎèÑ", "Í≥†Ìù•Íµ∞")
        "Î≥¥ÏÑ±" -> Pair("Ï†ÑÎùºÎÇ®ÎèÑ", "Î≥¥ÏÑ±Íµ∞")
        "Ïã†Ïïà" -> Pair("Ï†ÑÎùºÎÇ®ÎèÑ", "Ïã†ÏïàÍµ∞")
        "Ìï®Ìèâ" -> Pair("Ï†ÑÎùºÎÇ®ÎèÑ", "Ìï®ÌèâÍµ∞")

        "Í≥†ÏÑ±" -> Pair("Í≤ΩÏÉÅÎÇ®ÎèÑ", "Í≥†ÏÑ±Íµ∞")
        "ÎÇ®Ìï¥" -> Pair("Í≤ΩÏÉÅÎÇ®ÎèÑ", "ÎÇ®Ìï¥Íµ∞")
        "ÌïòÎèô" -> Pair("Í≤ΩÏÉÅÎÇ®ÎèÑ", "ÌïòÎèôÍµ∞")
        "Ìï©Ï≤ú" -> Pair("Í≤ΩÏÉÅÎÇ®ÎèÑ", "Ìï©Ï≤úÍµ∞")

        "Î¨∏Í≤Ω" -> Pair("Í≤ΩÏÉÅÎ∂ÅÎèÑ", "Î¨∏Í≤ΩÏãú")
        "ÏÉÅÏ£º" -> Pair("Í≤ΩÏÉÅÎ∂ÅÎèÑ", "ÏÉÅÏ£ºÏãú")
        "ÏïàÎèô" -> Pair("Í≤ΩÏÉÅÎ∂ÅÎèÑ", "ÏïàÎèôÏãú")
        "ÏòÅÏ≤ú" -> Pair("Í≤ΩÏÉÅÎ∂ÅÎèÑ", "ÏòÅÏ≤úÏãú")

        "ÌèâÏ∞Ω" -> Pair("Í∞ïÏõêÌäπÎ≥ÑÏûêÏπòÎèÑ", "ÌèâÏ∞ΩÍµ∞")
        "Ìö°ÏÑ±" -> Pair("Í∞ïÏõêÌäπÎ≥ÑÏûêÏπòÎèÑ", "Ìö°ÏÑ±Íµ∞")
        "ÌÉúÎ∞±" -> Pair("Í∞ïÏõêÌäπÎ≥ÑÏûêÏπòÎèÑ", "ÌÉúÎ∞±Ïãú")
        "Ï†ïÏÑ†" -> Pair("Í∞ïÏõêÌäπÎ≥ÑÏûêÏπòÎèÑ", "Ï†ïÏÑ†Íµ∞")

        "Í¥¥ÏÇ∞" -> Pair("Ï∂©Ï≤≠Î∂ÅÎèÑ", "Í¥¥ÏÇ∞Íµ∞")
        "Î≥¥ÏùÄ" -> Pair("Ï∂©Ï≤≠Î∂ÅÎèÑ", "Î≥¥ÏùÄÍµ∞")
        "ÏòÅÎèô" -> Pair("Ï∂©Ï≤≠Î∂ÅÎèÑ", "ÏòÅÎèôÍµ∞")
        "Ï†úÏ≤ú" -> Pair("Ï∂©Ï≤≠Î∂ÅÎèÑ", "Ï†úÏ≤úÏãú")

        "Î≥¥Î†π" -> Pair("Ï∂©Ï≤≠ÎÇ®ÎèÑ", "Î≥¥Î†πÏãú")
        "Î∂ÄÏó¨" -> Pair("Ï∂©Ï≤≠ÎÇ®ÎèÑ", "Î∂ÄÏó¨Íµ∞")
        "Í≥µÏ£º" -> Pair("Ï∂©Ï≤≠ÎÇ®ÎèÑ", "Í≥µÏ£ºÏãú")
        "ÌÉúÏïà" -> Pair("Ï∂©Ï≤≠ÎÇ®ÎèÑ", "ÌÉúÏïàÍµ∞")

        else -> Pair("Í∏∞ÌÉÄ", "Í∏∞ÌÉÄ")
    }

    LaunchedEffect(Unit) {
        viewModel.fetchVillageData(
            sido = sido,
            sigungu = sigungu,
            division = null,
            pageNo = null,
            pageSize = null
        )
    }

    val villageData by viewModel.villageData
    Log.d("12341234", "$villageData")

    Column(modifier = Modifier
        .fillMaxWidth()
        .padding(0.dp)) {
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(
                text = "Ïö∞Î¶¨ Í≥†Ìñ• Ï≤¥ÌóòÎßàÏùÑ",
                fontSize = 20.sp,
                modifier = Modifier.padding(start = 15.dp)
            )
            Text(
                text = "Ï†ÑÏ≤¥Î≥¥Í∏∞",
                fontSize = 14.sp,
                color = Color.Gray,
                modifier = Modifier
                    .padding(end = 15.dp)
                    .clickable {
                        val city = displayedCity
                        navController.navigate("viliagepage?city=$city")
                    }
            )
        }

        Spacer(modifier = Modifier.height(20.dp))

        if (villageData.isEmpty()) {
            Text(text = "Îì±Î°ùÎêú Ï≤¥Ìóò ÎßàÏùÑÏù¥ ÏóÜÏäµÎãàÎã§ üò•", fontSize = 18.sp, modifier = Modifier.padding(16.dp))
        } else {
            Log.d("123456", "123456")
            Column(
                modifier = Modifier
                    .fillMaxWidth()
            ) {
                // Ï≤´ 3Í∞úÏùò Ìï≠Î™©Îßå Î≥¥Ïó¨Ï§å
                villageData.take(3).forEach { village ->
                    village?.let {
                        Log.d("MainVillageTab", "village: ${village.experienceVillageName}")
                        VillageItem(it)
                    } ?: run {
                        Log.e("MainVillageTab", "null Îç∞Ïù¥ÌÑ∞Í∞Ä Ï†ÑÎã¨ÎêòÏóàÏäµÎãàÎã§.")
                    }

                    Spacer(modifier = Modifier.height(16.dp)) // Í∞Å Ìï≠Î™© ÏÇ¨Ïù¥Ïóê Í∞ÑÍ≤© Ï∂îÍ∞Ä
                }
            }
        }
    }
}

@Composable
fun VillageItem(village: ExperienceVillage) {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .shadow(
                elevation = 4.dp,
                shape = RoundedCornerShape(12.dp)
            )
            .background(Color.White, shape = RoundedCornerShape(12.dp))
            .padding(16.dp)
    ) {
        Text(text = village.experienceVillageAddress, fontSize = 12.sp, color = Color.Gray)
        Spacer(modifier = Modifier.height(4.dp))
        Text(text = village.experienceVillageName, fontSize = 25.sp)
    }
}

